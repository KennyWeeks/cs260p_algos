unsigned solve(std::vector<std::vector<std::string> > grid) 
{
	unsigned size = grid.size();
	std::cout << size << std::endl;
	std::vector<std::vector<int> > pass (size, std::vector<int> (size));
	std::vector<std::vector<std::string> > p_power_up (size, std::vector<std::string> (size));
	std::vector<std::vector<std::string> > d_power_up (size, std::vector<std::string> (size));
	std::vector<std::vector<std::string> > d_keep_track(size, std::vector<std::string> (size));
	int start = 1;
	//Fill out top and left side
	for(int i = 0; i < size; i++) {
		if(grid[0][i] == "P") {
			p_power_up[0][i] = start;
			d_power_up[0][i] = d_power_up[0][i-1];
		} else if(grid[0][i] == "D") {
			d_power_up[0][i] = start;
			p_power_up[0][i] = p_power_up[0][i-1];
		} else {
			if(i > 0 and std::stoi(grid[0][i]) < 0 and p_power_up[0][i-1] != "x" and p_power_up[0][i] != "x") {
				pass[0][i] = start;
				p_power_up[0][i] = start;
				if(i + 1 < size) {
					p_power_up[0][i + 1] = "x";
					p_power_up[1][i] = "x";
				}
				d_power_up[0][i] = d_power_up[0][i-1];
			} else if(i > 0 and std::stoi(grid[0][i]) > 0 and d_power_up[0][i-1] != "x" and d_power_up[0][i] != "x") {
				pass[0][i] = start + (2 * std::stoi(grid[0][i]));
				start += (2 * std::stoi(grid[0][i]));
				d_power_up[0][i] = pass[0][i];
				if(i + 1 < size) {
					d_power_up[0][i + 1] = "x";
					d_power_up[1][i] = "x";
				}
				p_power_up[0][i] = p_power_up[0][i-1];
			} else {
				pass[0][i] = start + std::stoi(grid[0][i]);
				start += std::stoi(grid[0][i]);
				if(i == 0) {
					p_power_up[0][i] = "x";
					d_power_up[0][i] = "x";
				} else {
					p_power_up[0][i] = p_power_up[0][i-1];
					d_power_up[0][i] = d_power_up[0][i-1];
				}
			}
		}
		
	}
	start = 1;
	for(int i = 0; i < size; i++) {
		if(grid[i][0] == "D") {
			d_keep_track[i][0] = "D";
			d_power_up[i][0] = std::to_string(start);
		} else if(std::stoi(grid[i][0]) > 0 and d_keep_track[i-1][0] == "D") {
			pass[i][0] = start + (2 * std::stoi(grid[i][0]));
			start += (2 * std::stoi(grid[i][0]));
			d_power_up[i][0] = std::to_string(pass[i][0]);
		} else {
			pass[i][0] = start + std::stoi(grid[i][0]);
			start += std::stoi(grid[i][0]);
			if (i > 0 and d_keep_track[i-1][0] == "D") {
				d_keep_track[i][0] = "D";
				int sum = std::stoi(d_power_up[i-1][0]) + std::stoi(grid[i][0]);
				d_power_up[i][0] = std::to_string(sum);
			}
			
		}
	}

	std::vector<std::vector<std::string> > pass_d (size, std::vector<std::string> (size));
	std::queue<std::pair<int, int> > qone;
	std::queue<std::pair<int, int> > qtwo;
	std::vector<int> first_path;
	std::vector<int> second_path;
	pass_d = d_keep_track;
	for(int i = 1; i < size; i++) {
		for(int j = 1; j < size; j++) {
			std::pair<int, int> point1;
			std::pair<int, int> point2;
			if(i == size - 1 and j == size - 1) {
				point1.first = i-1;
				point1.second = j;
				point2.first = i;
				point2.second = j-1;
				qone.push(point1);
				qtwo.push(point2);
			}
			std::cout << i << ", " << j << std::endl;
			int current = std::stoi(grid[i][j]);
			int top = pass[i-1][j];
			int left = pass[i][j-1];
			std::string topD = pass_d[i-1][j];
			std::string leftD = pass_d[i][j-1];
			if(current > 0) {
				std::cout << "This is the top " << top << std::endl;
				std::cout << "This is the left " << left << std::endl;
				std::string top_old_d = ""; //May change to string for later
				if(topD == "D") {
					top += (2 * current);		
				} else {
					top += current;
				}

				if(d_keep_track[i-1][j] == "D") {
					top_old_d = std::to_string(std::stoi(d_power_up[i-1][j]) + (2 * current));
				}

				std::string left_old_d = "";
				if(leftD == "D") {
					left += (2 * current);
				} else {
					left += (current);
				}

				if(d_keep_track[i][j-1] == "D") {
					left_old_d = std::to_string(std::stoi(d_power_up[i][j-1]) + (2 * current));
				}

				if(i == size - 1 && j == size - 1) {
					first_path.push_back(top);
					second_path.push_back(left);
				}

				int maxi = std::max(top, left);
				if(top_old_d != "") {
					maxi = std::max(maxi, std::stoi(top_old_d));
				}

				if(left_old_d != "") {
					maxi = std::max(maxi, std::stoi(left_old_d));
				}

				pass[i][j] = maxi;
				std::cout << "This is the coordinate (" << i << ", " << j << ")" << std::endl;
				std::cout << "This is the value " << pass[i][j] << std::endl;
				std::cout << "-----------" << std::endl;
				//So since this is positive, you can't use it at all
				//This means that even if d value isn't 
			} else {
				std::string top_old_d = ""; //May change to string for later
				std::string left_old_d = "";

				for(int i = 0; i < size; i++) {
					for(int j = 0; j < size; j++) {
						if(d_keep_track[i][j] != "") {
							std::cout << d_keep_track[i][j] << " ";
						} else {
							std::cout << " __ "; 
						}
					}
					std::cout << std::endl;
				}

				if(d_keep_track[i-1][j] == "D") {
					top_old_d = std::to_string(std::stoi(d_power_up[i-1][j]) + std::stoi(grid[i][j]));
				}

				if(d_keep_track[i][j-1] == "D") {
					left_old_d = std::to_string(std::stoi(d_power_up[i][j-1]) + std::stoi(grid[i][j]));
				}

				top += current;
				left += current;

				std::cout << top << std::endl;
				std::cout << left << std::endl;

				if(i == size - 1 && j == size - 1) {
					first_path.push_back(top);
					second_path.push_back(left);
				}

				int maxi = std::max(top, left);
				pass[i][j] = maxi;

				//maxi = std::max(maxi, top_old_d);
				//maxi = std::max(maxi, left_old_d);

				std::cout << top_old_d << std::endl;
				std::cout << left_old_d << std::endl;
				
				if(top_old_d != "" and left_old_d != "") {
					int maxi = std::max(std::stoi(top_old_d), std::stoi(left_old_d));
					d_power_up[i][j] = std::to_string(maxi);
					d_keep_track[i][j] = "D";
				} else if(top_old_d != "") {
					d_power_up[i][j] = top_old_d;
					d_keep_track[i][j] = "D";
				} else if(left_old_d != "") {
					d_power_up[i][j] = left_old_d;
					d_keep_track[i][j] = "D";
				}

				std::cout << "This is the coordinate (" << i << ", " << j << ")" << std::endl;
				std::cout << "This is the value " << pass[i][j] << std::endl;
				std::cout << "-----------" << std::endl;
			}
		}
	}

	for(auto i:first_path) {
		std::cout << i << std::endl;
	}

	for(auto i:second_path) {
		std::cout << i << std::endl;
	}

	int iter = (2 * size) - 1;
	while(iter != 0) {
		int qone_size = qone.size();
		int qtwo_size = qtwo.size();
		std::queue<std::pair<int, int> > new_q_one;
		std::queue<std::pair<int, int> > new_q_two;
		while(qone_size != 0) {
			std::pair<int, int> point = qone.front();
			std::cout << "queue one (" << point.first << ", " << point.second << ")" << std::endl;
			int curr_value = pass[point.first][point.second];
			int curr_mover = std::stoi(grid[point.first][point.second]) * -1;
			int top = std::stoi(grid[point.first - 1][point.second]);
			int left = std::stoi(grid[point.first][point.second - 1]);
			std::pair<int, int> new_point;
			curr_value += curr_mover;
			if(curr_value == top) {
				new_point.first = point.first - 1;
				new_point.second = point.second;
				new_q_one.push(new_point);
			}

			if(curr_value == left) {
				new_point.first = point.first;
				new_point.second = point.second - 1;
				new_q_one.push(new_point);
			}
			qone_size--;
		}

		while(qtwo_size != 0) {
			std::pair<int, int> point = qtwo.front();
			std::cout << "queue two (" << point.first << ", " << point.second << ")" << std::endl;
			int curr_value = pass[point.first][point.second];
			int curr_mover = std::stoi(grid[point.first][point.second]) * -1;
			int top = std::stoi(grid[point.first - 1][point.second]);
			int left = std::stoi(grid[point.first][point.second - 1]);
			std::pair<int, int> new_point;
			curr_value += curr_mover;
			if(curr_value == top) {
				new_point.first = point.first - 1;
				new_point.second = point.second;
				new_q_two.push(new_point);
			}

			if(curr_value == left) {
				new_point.first = point.first;
				new_point.second = point.second - 1;
				new_q_two.push(new_point);
			}
			qtwo_size--;
		}
		iter--;
	}


	//path(size);
	/*for(int i =  1; i < size; i++) {
		for(int j = 1; j < size; j++) {
			int node = std::stoi(grid[i][j]);
			int left = pass[i][j-1] + node;
			int top = pass[i-1][j] + node;
			pass[i][j] = std::max(left, top);
			//unsigned left = pass[i][j-1] + std::stoi(grid[i][j]);
			//unsigned top = pass[i - 1][j] + std::stoi(grid[i][j]);
			//pass[i][j] = std::max(left, top);
		}
	}

	for(int i = 0; i < size; i++) {
		for(int j = 0; j < size; j++) {
			std::cout << pass[i][j] << " ";
		}
		std::cout << std::endl;
	}*/
	return 1;
}

